{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandradjordjevic/Documents/ananas/posts-and-comments/src/pages/PostList.js\",\n  _s = $RefreshSig$();\nimport Layout from \"../layouts/Layout\";\nimport { useLoaderData } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  const data = useLoaderData();\n  console.log(\"data\", data);\n  //console.log(\"posts=\", posts);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    list: data.postListResData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n};\n_s(PostList, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = PostList;\nexport default PostList;\nexport async function postListLoader({\n  request,\n  params\n}) {\n  const postListResponse = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  let postListResData = \"\";\n  if (!postListResponse) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch\"\n    }), {\n      status: 500\n    });\n  } else {\n    postListResData = await postListResponse.json();\n  }\n  const commentsResponse = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  let commentsResData = \"\";\n  // if (!commentsResponse) {\n  //   throw new Response(JSON.stringify({ message: \"Could not fetch\" }), {\n  //     status: 500,\n  //   });\n  // } else {\n  //   commentsResData = await commentsResponse.json();\n  // }\n\n  return [postListResData, commentsResData];\n}\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["Layout","useLoaderData","jsxDEV","_jsxDEV","PostList","_s","data","console","log","list","postListResData","fileName","_jsxFileName","lineNumber","columnNumber","_c","postListLoader","request","params","postListResponse","fetch","Response","JSON","stringify","message","status","json","commentsResponse","commentsResData","$RefreshReg$"],"sources":["/Users/aleksandradjordjevic/Documents/ananas/posts-and-comments/src/pages/PostList.js"],"sourcesContent":["import Layout from \"../layouts/Layout\";\nimport { useLoaderData } from \"react-router-dom\";\n\nconst PostList = () => {\n  const data = useLoaderData();\n  console.log(\"data\", data);\n  //console.log(\"posts=\", posts);\n  return <Layout list={data.postListResData} />;\n};\n\nexport default PostList;\n\nexport async function postListLoader({ request, params }) {\n  const postListResponse = await fetch(\n    \"https://jsonplaceholder.typicode.com/posts\"\n  );\n  let postListResData = \"\";\n  if (!postListResponse) {\n    throw new Response(JSON.stringify({ message: \"Could not fetch\" }), {\n      status: 500,\n    });\n  } else {\n    postListResData = await postListResponse.json();\n  }\n\n  const commentsResponse = await fetch(\n    \"https://jsonplaceholder.typicode.com/posts\"\n  );\n  let commentsResData = \"\";\n  // if (!commentsResponse) {\n  //   throw new Response(JSON.stringify({ message: \"Could not fetch\" }), {\n  //     status: 500,\n  //   });\n  // } else {\n  //   commentsResData = await commentsResponse.json();\n  // }\n\n  return [postListResData, commentsResData];\n}\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,mBAAmB;AACtC,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,IAAI,GAAGL,aAAa,CAAC,CAAC;EAC5BM,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEF,IAAI,CAAC;EACzB;EACA,oBAAOH,OAAA,CAACH,MAAM;IAACS,IAAI,EAAEH,IAAI,CAACI;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC/C,CAAC;AAACT,EAAA,CALID,QAAQ;EAAA,QACCH,aAAa;AAAA;AAAAc,EAAA,GADtBX,QAAQ;AAOd,eAAeA,QAAQ;AAEvB,OAAO,eAAeY,cAAcA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EACxD,MAAMC,gBAAgB,GAAG,MAAMC,KAAK,CAClC,4CACF,CAAC;EACD,IAAIV,eAAe,GAAG,EAAE;EACxB,IAAI,CAACS,gBAAgB,EAAE;IACrB,MAAM,IAAIE,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAkB,CAAC,CAAC,EAAE;MACjEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACLf,eAAe,GAAG,MAAMS,gBAAgB,CAACO,IAAI,CAAC,CAAC;EACjD;EAEA,MAAMC,gBAAgB,GAAG,MAAMP,KAAK,CAClC,4CACF,CAAC;EACD,IAAIQ,eAAe,GAAG,EAAE;EACxB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAO,CAAClB,eAAe,EAAEkB,eAAe,CAAC;AAC3C;AAAC,IAAAb,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
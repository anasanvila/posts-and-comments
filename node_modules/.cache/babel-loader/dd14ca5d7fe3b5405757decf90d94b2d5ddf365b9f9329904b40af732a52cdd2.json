{"ast":null,"code":"import{useRouteError}from\"react-router\";import useEffect from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ErrorPage=_ref=>{let{text}=_ref;const error=useRouteError();useEffect(()=>text(\"ErrorPage\"));let title=\"Error\";let message=\"Something went wrong\";if(error.status==500){message=error.data.message;}if(error.status==404){message=\"couldn't find page\";}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:title}),/*#__PURE__*/_jsx(\"h1\",{children:message})]});};export default ErrorPage;","map":{"version":3,"names":["useRouteError","useEffect","jsx","_jsx","jsxs","_jsxs","ErrorPage","_ref","text","error","title","message","status","data","children"],"sources":["/Users/aleksandradjordjevic/Documents/ananas/posts-and-comments/src/pages/ErrorPage.js"],"sourcesContent":["import { useRouteError } from \"react-router\";\nimport useEffect from \"react\";\n\nconst ErrorPage = ({ text }) => {\n  const error = useRouteError();\n  useEffect(() => text(\"ErrorPage\"));\n  let title = \"Error\";\n  let message = \"Something went wrong\";\n\n  if (error.status == 500) {\n    message = error.data.message;\n  }\n\n  if (error.status == 404) {\n    message = \"couldn't find page\";\n  }\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <h1>{message}</h1>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n"],"mappings":"AAAA,OAASA,aAAa,KAAQ,cAAc,CAC5C,MAAO,CAAAC,SAAS,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE9B,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAAc,IAAb,CAAEC,IAAK,CAAC,CAAAD,IAAA,CACzB,KAAM,CAAAE,KAAK,CAAGT,aAAa,CAAC,CAAC,CAC7BC,SAAS,CAAC,IAAMO,IAAI,CAAC,WAAW,CAAC,CAAC,CAClC,GAAI,CAAAE,KAAK,CAAG,OAAO,CACnB,GAAI,CAAAC,OAAO,CAAG,sBAAsB,CAEpC,GAAIF,KAAK,CAACG,MAAM,EAAI,GAAG,CAAE,CACvBD,OAAO,CAAGF,KAAK,CAACI,IAAI,CAACF,OAAO,CAC9B,CAEA,GAAIF,KAAK,CAACG,MAAM,EAAI,GAAG,CAAE,CACvBD,OAAO,CAAG,oBAAoB,CAChC,CAEA,mBACEN,KAAA,QAAAS,QAAA,eACEX,IAAA,OAAAW,QAAA,CAAKJ,KAAK,CAAK,CAAC,cAChBP,IAAA,OAAAW,QAAA,CAAKH,OAAO,CAAK,CAAC,EACf,CAAC,CAEV,CAAC,CAED,cAAe,CAAAL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandradjordjevic/Documents/ananas/posts-and-comments/src/organisms/Card.js\";\nimport React from\n//   cloneElement, // ,{\n//   createContext,\n//   useContext,\n//   useState,\n// }\n\"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  post\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"card p-3 mt-3 fs-6 text-start h-100\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-header\",\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"badge border border-success text-success \",\n        children: [\"User: \", post.userId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"card-title cap\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-body\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"card-text cap\",\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-footer\",\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#\",\n      className: \"btn btn-success\",\n      children: \"See more...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this)]\n}, post.id, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n_c = Card;\nexport default Card;\n\n// const LIMIT = 3;\n\n// const CardContext = createContext();\n\n// const Card = ({ children }) => {\n//   const [isCollapsed, setIsCollapsed] = useState(true);\n\n//   const expand = () => {\n//     setIsCollapsed(!isCollapsed);\n//   };\n\n//   const collapse = () => {\n//     setIsCollapsed(!isCollapsed);\n//   };\n\n//   const value = { isCollapsed, expand, collapse };\n//   return (\n//     <CardContext.Provider value={value}>\n//       <div className=\"card\">{children}</div>\n//     </CardContext.Provider>\n//   );\n// };\n\n// const CardContent = ({ children }) => {s\n//   const { isCollapsed } = useContext(CardContext);\n//   return children.map((child, index) => {\n//     if (isCollapsed) {\n//       while (LIMIT > index) {\n//         return <div key={index}>{child}</div>;\n//       }\n//     } else {\n//       return <div key={index}>{child}</div>;\n//     }\n//   });\n// };\n\n// const Expand = ({ children }) => {\n//   const { expand, isCollapsed } = useContext(CardContext);\n//   return isCollapsed && cloneElement(children, { onClick: expand });\n// };\n\n// const Collapse = ({ children }) => {\n//   const { collapse, isCollapsed } = useContext(CardContext);\n//   return !isCollapsed && cloneElement(children, { onClick: collapse });\n// };\n\n// Card.CardContent = CardContent;\n// Card.Expand = Expand;\n// Card.Collapse = Collapse;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Card","post","className","children","userId","fileName","_jsxFileName","lineNumber","columnNumber","title","body","href","id","_c","$RefreshReg$"],"sources":["/Users/aleksandradjordjevic/Documents/ananas/posts-and-comments/src/organisms/Card.js"],"sourcesContent":["import React from //   cloneElement, // ,{\n//   createContext,\n//   useContext,\n//   useState,\n// }\n\"react\";\n\nconst Card = ({ post }) => (\n  <div className=\"card p-3 mt-3 fs-6 text-start h-100\" key={post.id}>\n    <div className=\"card-header\">\n      <h6>\n        <span className=\"badge border border-success text-success \">\n          User: {post.userId}\n        </span>\n      </h6>\n      <h5 className=\"card-title cap\">{post.title}</h5>\n    </div>\n    <div className=\"card-body\">\n      <p className=\"card-text cap\">{post.body}</p>\n    </div>\n    <div className=\"card-footer\">\n      <a href=\"#\" className=\"btn btn-success\">\n        See more...\n      </a>\n    </div>\n  </div>\n);\n\nexport default Card;\n\n// const LIMIT = 3;\n\n// const CardContext = createContext();\n\n// const Card = ({ children }) => {\n//   const [isCollapsed, setIsCollapsed] = useState(true);\n\n//   const expand = () => {\n//     setIsCollapsed(!isCollapsed);\n//   };\n\n//   const collapse = () => {\n//     setIsCollapsed(!isCollapsed);\n//   };\n\n//   const value = { isCollapsed, expand, collapse };\n//   return (\n//     <CardContext.Provider value={value}>\n//       <div className=\"card\">{children}</div>\n//     </CardContext.Provider>\n//   );\n// };\n\n// const CardContent = ({ children }) => {s\n//   const { isCollapsed } = useContext(CardContext);\n//   return children.map((child, index) => {\n//     if (isCollapsed) {\n//       while (LIMIT > index) {\n//         return <div key={index}>{child}</div>;\n//       }\n//     } else {\n//       return <div key={index}>{child}</div>;\n//     }\n//   });\n// };\n\n// const Expand = ({ children }) => {\n//   const { expand, isCollapsed } = useContext(CardContext);\n//   return isCollapsed && cloneElement(children, { onClick: expand });\n// };\n\n// const Collapse = ({ children }) => {\n//   const { collapse, isCollapsed } = useContext(CardContext);\n//   return !isCollapsed && cloneElement(children, { onClick: collapse });\n// };\n\n// Card.CardContent = CardContent;\n// Card.Expand = Expand;\n// Card.Collapse = Collapse;\n"],"mappings":";AAAA,OAAOA,KAAK;AAAM;AAClB;AACA;AACA;AACA;AACA,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAER,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAK,CAAC,kBACpBF,OAAA;EAAKG,SAAS,EAAC,qCAAqC;EAAAC,QAAA,gBAClDJ,OAAA;IAAKG,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BJ,OAAA;MAAAI,QAAA,eACEJ,OAAA;QAAMG,SAAS,EAAC,2CAA2C;QAAAC,QAAA,GAAC,QACpD,EAACF,IAAI,CAACG,MAAM;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACLT,OAAA;MAAIG,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEF,IAAI,CAACQ;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC,eACNT,OAAA;IAAKG,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBJ,OAAA;MAAGG,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEF,IAAI,CAACS;IAAI;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC,eACNT,OAAA;IAAKG,SAAS,EAAC,aAAa;IAAAC,QAAA,eAC1BJ,OAAA;MAAGY,IAAI,EAAC,GAAG;MAACT,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAExC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAAA,GAhBkDP,IAAI,CAACW,EAAE;EAAAP,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAiB5D,CACN;AAACK,EAAA,GAnBIb,IAAI;AAqBV,eAAeA,IAAI;;AAEnB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}